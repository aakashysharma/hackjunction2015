class CustomOnOffByContact(Rule):
    type = "CUSTOM_ONOFF_CONTACT_RULE"
    name = "custom On/off by contact"
    description = "c On/off by door sensors"
    summary = "This rule allows you to turn a device on or off based on door opening."

    sensors = Input(field_type=None,
                    capabilities=[Capability.CONTACT],
                    display_order=1,
                    description="Window/door sensor",
                    min_count=1)
    """ @type: list """

    devices = Output(field_type=Rule.LIGHT,
                     capabilities=[Capability.BRIGHTNESS],
                     display_order=2,
                     description="Controlled devices",
                     min_count=1)
    """ @type: list """

    output_state = Value(field_type=None,
                         display_order=3,
                         description="Turn on",
                         default=0.0,
                         min_count=1,
                         max_count=1)
    """ @type: list """

    def __init__(self):
        super().__init__()
        self.sensors_on = set()
        self.turn_on = True
        self.logger.info("INIT...")

    def enable(self):
        self.logger.info("Enable...")
        self.turn_on = self.output_state and self.output_state[0].value
        for t in self.sensors:
            self.send_command(ReportStatusCommand(t))

    def send_commands(self, on: bool):
        self.logger.info("Send cmds...")
        for d in self.devices:
          command = DeviceCommand(d)
          command.state = LightState()
          command.state.brightness = 0.7
          command.state.temperature = 4500		  
          self.send_command(command)

    def on_event(self, ev):
        self.logger.info("on event...")
        if ev.type != ContactEvent.type:
            return

        if ev.state.reachable and ev.state.open:
            self.sensors_on.add(ev.id)
        else:
            self.sensors_on.discard(ev.id)

        self.send_commands(len(self.sensors_on) > 0 if self.turn_on else len(self.sensors_on) == 0)

    def disable(self):
        self.logger.info("Disable...")
        self.sensors_on = set()